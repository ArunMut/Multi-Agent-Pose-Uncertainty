"""Minimal renderer interface used by the CRB utilities."""
from __future__ import annotations

import abc
from typing import Sequence

import numpy as np


class Renderer(abc.ABC):
    """Abstract base class describing the renderer contract."""

    @abc.abstractmethod
    def render(self, pose: np.ndarray) -> np.ndarray:
        """Render the scene using ``pose``.

        Implementations return a 1-D array whose length corresponds to the
        number of measurements/pixels produced by the renderer.
        """

    def jacobian_columns(
        self,
        pose: np.ndarray,
        *,
        basis: np.ndarray,
        pixels: Sequence[int] | None = None,
        epsilon: float = 1e-6,
    ) -> np.ndarray:
        """Return the Jacobian columns with respect to pose perturbations.

        The default implementation uses forward finite differences.  Custom
        renderers can override this method to provide analytic Jacobians or
        autodiff-backed computations.
        """

        base = self.render(pose)
        if pixels is not None:
            base = base[np.asarray(list(pixels), dtype=int)]
        num_measurements = base.size
        num_columns = basis.shape[1]
        columns = np.zeros((num_measurements, num_columns), dtype=float)
        for j in range(num_columns):
            delta = basis[:, j]
            perturbed_pose = self._perturb_pose(pose, delta, epsilon)
            rendered = self.render(perturbed_pose)
            if pixels is not None:
                rendered = rendered[np.asarray(list(pixels), dtype=int)]
            columns[:, j] = (rendered - base) / epsilon
        return columns

    def _perturb_pose(self, pose: np.ndarray, xi: np.ndarray, epsilon: float) -> np.ndarray:
        from .. import se3

        return se3.exp(epsilon * xi) @ pose

    @abc.abstractmethod
    def num_measurements(self) -> int:
        """Return the number of measurements/pixels generated by render."""
